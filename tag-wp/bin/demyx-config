#!/bin/bash
# Demyx
# https://demyx.sh
set -eEuo pipefail
#
#   Main.
#
demyx_config() {
    demyx_config_include
    demyx_config_php
    demyx_config_proxy
    demyx_config_www
}
#
#   demyx.php
#
demyx_config_include() {
    local DEMYX_CONFIG_INCLUDE=
    local DEMYX_CONFIG_INCLUDE_ENV="${DEMYX}"/.env
    local DEMYX_CONFIG_INCLUDE_HOME="${DEMYX_PROTO}://${DEMYX_DOMAIN}"
    DEMYX_CONFIG_INCLUDE="$(grep "demyx.php" "${DEMYX_WP_CONFIG}" || true)"

    if [[ "${DEMYX_BEDROCK}" = true ]]; then
        [[ -f "${DEMYX_CONFIG_INCLUDE_ENV}" ]] && sed -i "s|WP_HOME=.*|WP_HOME=${DEMYX_CONFIG_INCLUDE_HOME}|g" "${DEMYX_CONFIG_INCLUDE_ENV}"
        [[ ! -f "${DEMYX}/web/app/mu-plugins/wp-cli-login-server.php" ]] && ln -s "${DEMYX_CONFIG}/wp-cli-login-server.php" "${DEMYX}/web/app/mu-plugins/wp-cli-login-server.php"
    else
        if [[ ! -f "${DEMYX}/wp-content/mu-plugins/wp-cli-login-server.php" ]]; then
            [[ ! -d "${DEMYX}/wp-content/mu-plugins" ]] && mkdir -p "${DEMYX}/wp-content/mu-plugins"
            ln -s "${DEMYX_CONFIG}/wp-cli-login-server.php" "${DEMYX}/wp-content/mu-plugins"
        fi
    fi

    # Include demyx.php
    if [[ -z "${DEMYX_CONFIG_INCLUDE}" ]]; then
        sed -i "s|<?php.*|<?php\n\
// Demyx\n\
// https://demyx.sh\n\
if ( file_exists( getenv( 'DEMYX_CONFIG' ) . '/demyx.php' ) ) {\n\
    include_once getenv( 'DEMYX_CONFIG' ) . '/demyx.php';\n\
}\n\
\n|g" "$DEMYX_WP_CONFIG"
    fi

    if [[ -f "${DEMYX_CONFIG}/custom/wordpress/demyx.php" ]]; then
        ln -sf "${DEMYX_CONFIG}/custom/wordpress/demyx.php" "${DEMYX_CONFIG}/demyx.php"
    elif [[ ! -f "${DEMYX_CONFIG}/custom/wordpress/demyx.php" ]]; then
        {
            echo "<?php
/**
Demyx customizations.

@package  Demyx
@version  1.2.0
@author   Demyx <info@demyx.sh>
@link     https://demyx.sh
 */
 "

        if [[ "${DEMYX_BEDROCK}" = false ]]; then
            echo "// If we're behind a proxy server and using HTTPS, we need to alert WordPress of that fact.
// See also http://codex.wordpress.org/Administration_Over_SSL#Using_a_Reverse_Proxy.
if ( isset( \$_SERVER['HTTP_X_FORWARDED_PROTO'] ) && 'https' === \$_SERVER['HTTP_X_FORWARDED_PROTO'] ) {
	\$_SERVER['HTTPS'] = 'on';
}

// Define variables.
\$demyx_proto      = 'https' === getenv( 'DEMYX_PROTO' ) ? 'https' : 'http';
\$demyx_domain     = getenv( 'DEMYX_DOMAIN' );
\$demyx_domain_old = getenv( 'WORDPRESS_DOMAIN' );
\$demyx_url        = null === \$demyx_domain || 'domain.tld' === \$demyx_domain ?
	\$demyx_proto . '://' . \$demyx_domain_old :
	\$demyx_proto . '://' . \$demyx_domain;

// Define URLs based on DEMYX_DOMAIN container variable.
define( 'WP_HOME', \$demyx_url );
define( 'WP_SITEURL', \$demyx_url );

// Disable WordPress cron.
define( 'DISABLE_WP_CRON', true );
            "
        fi

        echo "// Redis Cache - https://wordpress.org/plugins/redis-cache/
define( 'WP_REDIS_HOST', '${DEMYX_DB_HOST/db/rd}' );
define( 'WP_REDIS_PORT', 6379 );
define( 'WP_REDIS_PREFIX', '${DEMYX_DOMAIN}' );
define( 'WP_REDIS_DATABASE', 0 );
define( 'WP_REDIS_TIMEOUT', 1 );
define( 'WP_REDIS_READ_TIMEOUT', 1 );

// Disable installation of default themes/plugins when upgrading
define( 'CORE_UPGRADE_SKIP_NEW_BUNDLED', true );"

        # Add CONCATENATE_SCRIPTS only if not using Bedrock to avoid redefinition
        if [[ "${DEMYX_BEDROCK}" = false ]]; then
            echo "
// Mitigate DoS attack CVE with WordPress script concatenation
define( 'CONCATENATE_SCRIPTS', false );"
        fi

        echo "
        "

        } > "${DEMYX_CONFIG}/demyx.php"
    fi
}
#
#   demyx.ini
#
demyx_config_php() {
    if [[ -f "${DEMYX_CONFIG}/custom/wordpress/demyx.ini" ]]; then
        ln -sf "${DEMYX_CONFIG}/custom/wordpress/demyx.ini" "${DEMYX_CONFIG}/demyx.ini"
    elif [[ ! -f "${DEMYX_CONFIG}/custom/wordpress/demyx.ini" ]]; then
        # PHP opcache
        if [[ "${DEMYX_OPCACHE}" = off || "${DEMYX_OPCACHE}" = false ]]; then
            DEMYX_OPCACHE_ENABLE=0
            DEMYX_OPCACHE_ENABLE_CLI=0
        fi

        cat << EOF > "${DEMYX_CONFIG}/demyx.ini"
[Date]
date.timezone                       = ${TZ}

[PHP]
memory_limit                        = ${DEMYX_MEMORY}
post_max_size                       = ${DEMYX_UPLOAD_LIMIT}
upload_max_filesize                 = ${DEMYX_UPLOAD_LIMIT}
max_execution_time                  = ${DEMYX_MAX_EXECUTION_TIME}

[opcache]
opcache.consistency_checks          = 0
opcache.enable                      = ${DEMYX_OPCACHE_ENABLE}
opcache.enable_cli                  = ${DEMYX_OPCACHE_ENABLE_CLI}
opcache.interned_strings_buffer     = 32
opcache.max_accelerated_files       = 10000
opcache.max_wasted_percentage       = 10
opcache.memory_consumption          = 256
opcache.revalidate_freq             = 0
opcache.save_comments               = 1
opcache.validate_timestamps         = 1
EOF
    fi
}
#
#   TEMPORARY
#   Delete old reverse proxy rules but make a copy of wp-config.php first
#
demyx_config_proxy() {
    local DEMYX_CONFIG_PROXY=
    DEMYX_CONFIG_PROXY="$(grep "Using_a_Reverse_Proxy" "$DEMYX_WP_CONFIG" || true)"

    if [[ -n "$DEMYX_CONFIG_PROXY" ]]; then
        cp "$DEMYX_WP_CONFIG" "$DEMYX"/"$(date +%F-%H-%M-%S)"-wp-config.bak
        sed -z "s|// If we're behind a .*}||g" "$DEMYX_WP_CONFIG" > /tmp/wp
        mv /tmp/wp "$DEMYX_WP_CONFIG"
    fi
}
#
#   www.conf
#
demyx_config_www() {
    if [[ -f "${DEMYX_CONFIG}/custom/wordpress/www.conf" ]]; then
        ln -sf "${DEMYX_CONFIG}/custom/wordpress/www.conf" "${DEMYX_CONFIG}/www.conf"
    elif [[ ! -f "${DEMYX_CONFIG}/custom/wordpress/www.conf" ]]; then
        # Auto calc
        local DEMYX_CONFIG_WWW_BUFFER=
        local DEMYX_CONFIG_WWW_MAX_MEMORY=
        local DEMYX_CONFIG_WWW_RAM=
        local DEMYX_CONFIG_WWW_MAX_CHILDREN=
        local DEMYX_CONFIG_WWW_MAX_SPARE_SERVERS

        DEMYX_CONFIG_WWW_MAX_MEMORY="$(free | grep Mem | awk -F ' ' '{print $2}')"
        DEMYX_CONFIG_WWW_BUFFER="$(( "${DEMYX_CONFIG_WWW_MAX_MEMORY}" * 10 /100 ))"
        DEMYX_CONFIG_WWW_RAM="$(( "${DEMYX_CONFIG_WWW_MAX_MEMORY}" - "${DEMYX_CONFIG_WWW_BUFFER}" - "${DEMYX_CONFIG_WWW_BUFFER}" ))"
        DEMYX_CONFIG_WWW_MAX_CHILDREN="$(( "${DEMYX_CONFIG_WWW_RAM}" / "${DEMYX_PM_AVERAGE}" ))" # Average maybe
        DEMYX_CONFIG_WWW_START_SERVERS="$(( "${DEMYX_CONFIG_WWW_MAX_CHILDREN}" * 25 / 100 ))"
        DEMYX_CONFIG_WWW_MIN_SPARE_SERVERS="${DEMYX_CONFIG_WWW_START_SERVERS}"
        DEMYX_CONFIG_WWW_MAX_SPARE_SERVERS="$(( "${DEMYX_CONFIG_WWW_MAX_CHILDREN}" * 75 / 100 ))"

        cat << EOF > "${DEMYX_CONFIG}/www.conf"
[${DEMYX_DOMAIN}]
catch_workers_output                = yes
decorate_workers_output             = no
chdir                               = ${DEMYX}
listen                              = 9000
php_admin_value[error_log]          = ${DEMYX_LOG}/${DEMYX_DOMAIN}.error.log
pm                                  = dynamic
pm.max_children                     = ${DEMYX_CONFIG_WWW_MAX_CHILDREN}
pm.max_requests                     = ${DEMYX_PM_MAX_REQUESTS}
pm.max_spare_servers                = ${DEMYX_CONFIG_WWW_MAX_SPARE_SERVERS}
pm.min_spare_servers                = ${DEMYX_CONFIG_WWW_MIN_SPARE_SERVERS}
pm.start_servers                    = ${DEMYX_CONFIG_WWW_START_SERVERS}
access.log                          = /proc/self/fd/2
clear_env                           = no

[global]
emergency_restart_interval          = ${DEMYX_EMERGENCY_RESTART_INTERVAL}
emergency_restart_threshold         = ${DEMYX_EMERGENCY_RESTART_THRESHOLD}
process_control_timeout             = ${DEMYX_PROCESS_CONTROL_TIMEOUT}
error_log                           = /proc/self/fd/2
log_limit                           = 8192
EOF
    fi
}
#
#   Init.
#
demyx_config
